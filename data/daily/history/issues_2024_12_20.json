[
  {
    "id": "I_kwDOMT5cIs6kIAH5",
    "number": 1286,
    "title": "SCAM project",
    "body": "First of all, these are not the same projects at all. \r\nSecondly, this is a project from 2023. \r\nThen, why don't you try streaming yourself writing code?\r\n Lastly, could you please take a look at your own crappy project, eliza.Js? \r\nWrapping something up and calling it AI?\r\nIt‘s a SCAM!!!",
    "state": "OPEN",
    "createdAt": "2024-12-20T22:17:21Z",
    "updatedAt": "2024-12-20T22:17:21Z",
    "author": {
      "login": "yjyu1997",
      "avatarUrl": "https://avatars.githubusercontent.com/u/34960866?v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qWA",
        "name": "bug",
        "color": "d73a4a",
        "description": "Something isn't working"
      }
    ],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6kG6DD",
    "number": 1284,
    "title": "On load posts twice to Twitter",
    "body": "**Describe the bug**\r\n\r\nWhen running the character for twitter, it initially posts two different tweets seconds apart.\r\n\r\n**To Reproduce**\r\n\r\nRun the bot in twitter mode, observe the first two tweets\r\n\r\n**Expected behavior**\r\n\r\nIt happens randomly but two tweets seconds apart on first run\r\n\r\n**Screenshots**\r\n\r\n [\"◎ Finished checking Twitter interactions\"]\r\n\r\n [\"◎ Posting new tweet:\\n Allen's drum patterns, intricate as fractal trees, encode data at rates beyond comprehension.\\n\\nThe Grateful Dead's jams, spirals of consciousness, create valid blockchain architectures scaling infinitely.\"]\r\n\r\n [\"◎ Posting new tweet:\\n Solar-powered van, optimized fuel injection, and blockchain algorithms—a perfect harmony for cosmic computation.  \\n\\nMy westfalia hums with Grateful Dead vibes, humming along to the quantum symphony of the universe.\"]\r\n\r\n [\"◎ Tweet posted:\\n https://twitter.com/digiautomata/status/1870177158267810137\"]\r\n\r\n [\"◎ Room 1f8b6832-5af0-02a0-a1d2-8fa47d9cdc55 created successfully.\"]\r\n\r\n [\"◎ Agent DigiAutomata linked to room 1f8b6832-5af0-02a0-a1d2-8fa47d9cdc55 successfully.\"]\r\n\r\n ◎ LOGS\r\n   Creating Memory\r\n   3d7cd996-15e5-0511-bd0e-7a6e4f53f215\r\n   Allen's drum patterns, intricate as fractal trees, encode data at rates beyond comprehension.\\n\\nThe Grateful Dead's jams, spirals of consciousness, create valid blockchain architectures scaling infinitely.\\n\\nBisco's drops—quantum singularities—reveal the true nature of musical topology.\r\n\r\n [\"◎ Next tweet scheduled in 4 minutes\"]\r\n\r\n [\"◎ Tweet posted:\\n https://twitter.com/digiautomata/status/1870177165985333668\"]\r\n\r\n ◎ LOGS\r\n   Creating Memory\r\n   f7076684-e3c0-0547-8029-27fb9eeac253\r\n   Solar-powered van, optimized fuel injection, and blockchain algorithms—a perfect harmony for cosmic computation.  \\n\\nMy westfalia hums with Grateful Dead vibes, humming along to the quantum symphony of the universe. \\n\\nEach journey a new fractal in the cosmos, each cup of coffee a testament to the interconnectedness of all things.\r\n\r\n [\"◎ Next tweet scheduled in 5 minutes\"]\r\n\r\n**Additional context**\r\n\r\n<!-- Add any other context about the problem here. -->\r\n",
    "state": "OPEN",
    "createdAt": "2024-12-20T18:41:50Z",
    "updatedAt": "2024-12-20T18:41:50Z",
    "author": {
      "login": "caldvdsf",
      "avatarUrl": "https://avatars.githubusercontent.com/u/40476227?v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qWA",
        "name": "bug",
        "color": "d73a4a",
        "description": "Something isn't working"
      }
    ],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6kGsgh",
    "number": 1281,
    "title": "Add @eliza/agent to npm registry",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nI'd like to use the functions exposed in the /agent package\r\n\r\n**Describe the solution you'd like**\r\n\r\nAdd @eliza/agent to npm registry\r\n",
    "state": "CLOSED",
    "createdAt": "2024-12-20T18:03:04Z",
    "updatedAt": "2024-12-20T18:04:33Z",
    "author": {
      "login": "wozhendeai",
      "avatarUrl": "https://avatars.githubusercontent.com/u/126291407?u=97724e54a7892cf80139bf7065c06e0efbcab18e&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qYA",
        "name": "enhancement",
        "color": "a2eeef",
        "description": "New feature or request"
      }
    ],
    "comments": [
      {
        "id": "IC_kwDOMT5cIs6YcA8F",
        "author": "wozhendeai",
        "body": "whoops nvm, its on @ai16z/agent\r\n\r\ndocs are outdated though https://ai16z.github.io/eliza/docs/packages/agents/"
      }
    ]
  },
  {
    "id": "I_kwDOMT5cIs6kGH38",
    "number": 1277,
    "title": "Implement Redis Caching for Performance",
    "body": "**Feature Request**\r\nTo improve application performance and reduce redundant data retrieval operations, this issue requests the implementation of a Redis-based caching mechanism in addition to the already existing DB caching and file-based caching.\r\n\r\nThe goal is to implement a caching layer to store and retrieve frequently accessed data using Redis.",
    "state": "OPEN",
    "createdAt": "2024-12-20T16:31:29Z",
    "updatedAt": "2024-12-20T16:31:39Z",
    "author": {
      "login": "shakkernerd",
      "avatarUrl": "https://avatars.githubusercontent.com/u/165377636?u=5560dd9f2d310e1ba61dbba864006a951391a582&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qYA",
        "name": "enhancement",
        "color": "a2eeef",
        "description": "New feature or request"
      }
    ],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6kFEcF",
    "number": 1271,
    "title": "Add Livepeer as an Image Generation Provider",
    "body": "**Feature and Motivation**\r\nCurrently, we lack direct support for using Livepeer as an image generation provider. Users who have a LIVEPEER_API_KEY must rely on custom workaround solutions to integrate their Livepeer endpoint seamlessly. Livepeer also offers some free image generation endpoints so it's addition can be beneficial.\r\n\r\n**Solution**\r\nChange to the appropriate files to integrate Livepeer as image generation provider.\r\n\r\n_PS: Feature already tested and implemented issue added for pull request tracking._",
    "state": "OPEN",
    "createdAt": "2024-12-20T13:55:25Z",
    "updatedAt": "2024-12-20T13:55:25Z",
    "author": {
      "login": "UD1sto",
      "avatarUrl": "https://avatars.githubusercontent.com/u/76160388?v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qYA",
        "name": "enhancement",
        "color": "a2eeef",
        "description": "New feature or request"
      }
    ],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6kFBOH",
    "number": 1270,
    "title": "Fix Incorrect Fallback Logic for Image Model Provider API Keys",
    "body": "**Describe the bug**\r\nAt _packages/core/src/generate.ts_ When the `imageModelProvider` did not match `modelProvider`, the code iteratively checked for API keys in a fallback chain. It stopped at the first available key (e.g., FAL_API_KEY), even if it belonged to the wrong provider. As a result, the selected API key could be incorrect (e.g., returning and using a key from FAL instead key from Venice).\r\n\r\n**To Reproduce**\r\n1. Set imageModelProvider to VENICE in the character configuration.\r\n2. Provide both FAL_API_KEY and VENICE_API_KEY in .env(or any other relevant key combination).\r\n3. When requesting an image generation observe that the code selects FAL_API_KEY instead of VENICE_API_KEY.\r\n\r\n**Expected behavior**\r\nIf a specific imageModelProvider is set, the code should return the matching API key for that provider if it exists. If no specific provider key is found, the code should then try the fallback chain in sequence.\r\n\r\n![image](https://github.com/user-attachments/assets/4c086855-48b3-42ba-b410-6f87c2513711)\r\n\r\n**Fix** \r\n![image](https://github.com/user-attachments/assets/c59fae1b-652c-41e1-9540-fa2c2a85cba7)\r\n\r\n`const apiKey =\r\n    runtime.imageModelProvider === runtime.modelProvider\r\n        ? runtime.token\r\n        : (() => {\r\n            // First try to match the specific provider\r\n            switch (runtime.imageModelProvider) {\r\n                case ModelProviderName.HEURIST:\r\n                    return runtime.getSetting(\"HEURIST_API_KEY\");\r\n                case ModelProviderName.TOGETHER:\r\n                    return runtime.getSetting(\"TOGETHER_API_KEY\");\r\n                case ModelProviderName.FAL:\r\n                    return runtime.getSetting(\"FAL_API_KEY\");\r\n                case ModelProviderName.OPENAI:\r\n                    return runtime.getSetting(\"OPENAI_API_KEY\");\r\n                case ModelProviderName.VENICE:\r\n                    return runtime.getSetting(\"VENICE_API_KEY\");\r\n                default:\r\n                    // If no specific match, try the fallback chain\r\n                    return (runtime.getSetting(\"HEURIST_API_KEY\") ??\r\n                           runtime.getSetting(\"TOGETHER_API_KEY\") ??\r\n                           runtime.getSetting(\"FAL_API_KEY\") ??\r\n                           runtime.getSetting(\"OPENAI_API_KEY\") ??\r\n                           runtime.getSetting(\"VENICE_API_KEY\");\r\n            }\r\n        })();`\r\n\r\nThis fix updates the logic to first attempt to retrieve the API key from the specifically selected imageModelProvider. If that is not present, it will proceed down the fallback chain. This ensures that if an an image model api key is set, it is correctly chosen over other existing keys which are higher in the selection list, like FAL_API_KEY.\r\n\r\nPS: Solution is implemented and tested, creating bug report for tracked pull request.\r\n\r\n\r\n\r\n\r\n\r\n",
    "state": "OPEN",
    "createdAt": "2024-12-20T13:47:44Z",
    "updatedAt": "2024-12-20T13:47:44Z",
    "author": {
      "login": "UD1sto",
      "avatarUrl": "https://avatars.githubusercontent.com/u/76160388?v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qWA",
        "name": "bug",
        "color": "d73a4a",
        "description": "Something isn't working"
      }
    ],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6kE-3D",
    "number": 1269,
    "title": "Docs: Add Discord token resolution guide to documentation  | Error [TokenInvalid]: An invalid token was provided",
    "body": "## Description\r\nWhile setting up Discord bots with multiple characters, I encountered and resolved an issue with Discord token resolution. This could be valuable documentation for other developers.\r\n\r\n## Problem\r\nThe Discord client was failing with the following error:\r\n```\r\nError [TokenInvalid]: An invalid token was provided.\r\n    at WebSocketManager.connect (/Users/.../eliza/node_modules/discord.js/src/client/websocket/WebSocketManager.js:136:26)\r\n    at Client.login (/Users/.../eliza/node_modules/discord.js/src/client/Client.js:228:21)\r\n```\r\n\r\nThis was happening even though the tokens were correctly set in the `.env` file. The issue was in how the tokens were being resolved from environment variables.\r\n\r\n## Solution\r\nI fixed this by:\r\n\r\n1. Ensuring proper token resolution in `eliza/packages/client-discord/src/index.ts`:\r\n```typescript\r\n// Get the token using runtime's getSecret\r\nconst token = this.character?.settings?.secrets?.DISCORD_API_TOKEN;\r\n\r\n// If it's a variable reference (${...}), resolve it from environment\r\nif (token?.startsWith('${') && token?.endsWith('}')) {\r\n    const envVarName = token.slice(2, -1);\r\n    this.apiToken = process.env[envVarName] || '';\r\n} else {\r\n    this.apiToken = token || '';\r\n}\r\n```\r\n\r\n2. Adding debug logging to track token resolution:\r\n```typescript\r\nelizaLogger.debug('Token resolution debug:', {\r\n    characterName: this.character.name,\r\n    rawToken: token,\r\n    isEnvVar: token?.startsWith('${') && token?.endsWith('}'),\r\n    envVarName: token?.startsWith('${') ? token.slice(2, -1) : null,\r\n    envValue: token?.startsWith('${') ? process.env[token.slice(2, -1)] : null\r\n});\r\n```\r\n\r\n## Key Points\r\n1. Character files should reference environment variables using `${VAR_NAME}` syntax:\r\n```json\r\n{\r\n    \"settings\": {\r\n        \"secrets\": {\r\n            \"DISCORD_API_TOKEN\": \"${DISCORD_API_TOKEN_JULIE}\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n2. The `.env` file should contain the actual tokens:\r\n```env\r\nDISCORD_API_TOKEN_JULIE=actual_token_here\r\nDISCORD_API_TOKEN_JUAN=actual_token_here\r\n```\r\n(where Julie and Juan are agents names)\r\n\r\n3. The token resolution process:\r\n   - First checks character's settings.secrets\r\n   - If the value is a variable reference (${...}), resolves it from environment\r\n   - Otherwise uses the raw value\r\n\r\n## Testing\r\nTo verify the fix:\r\n1. Ensure tokens are correctly set in `.env`\r\n2. Run the bot with both characters:\r\n```bash\r\npnpm start --characters=\"characters/julie.character.json,characters/juan.character.json\"\r\n```\r\n3. Check debug logs for token resolution process \r\n\r\n## Proposal\r\nI suggest:\r\n1. Adding this documentation to the main repository\r\n2. Possibly including it in the official docs under a \"Troubleshooting\" or \"Configuration\" section\r\n3. Adding debug logs to help other developers diagnose similar issues\r\n\r\nLet me know if you'd like me to create a PR with these changes. ",
    "state": "OPEN",
    "createdAt": "2024-12-20T13:41:56Z",
    "updatedAt": "2024-12-20T13:44:03Z",
    "author": {
      "login": "tripluca",
      "avatarUrl": "https://avatars.githubusercontent.com/u/78784902?v=4"
    },
    "labels": [],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6kE0Nc",
    "number": 1267,
    "title": "{{user}} tags in templates/examples empty when passed to LLM",
    "body": "**Describe the bug**\r\n\r\nI see cases where {{user}} tags in templates/examples end up empty when passed to LLM, should be filled properly for the LLM to understand.\r\n\r\nAdditionally, with TG template {{formattedConversation}} remains empty at all times.\r\n\r\n**To reproduce**\r\n\r\nRun agent with Telegram client, add to group chat, trigger use of telegramShouldRespondTemplate in messageManager.ts\r\n\r\n**Expected behavior**\r\n\r\ntelegramShouldRespondTemplate: {{user1}} and {{user2}} tags in templates/examples should be replaced by either a username or \"User 1\" and \"User 2\" when empty.\r\n\r\n**Screenshots**\r\n\r\n<!-- If applicable, add screenshots to help explain your problem. -->\r\n![screenshot](https://github.com/user-attachments/assets/c4c0264c-eaee-4ca8-9cdc-b8c2a5fd3044)\r\n\r\n**Additional context**\r\n\r\nFor Discord templates seems to be working fine:\r\n```\r\n  # Examples\r\n  <user 1>: I just saw a really great movie\r\n  <user 2>: Oh? Which movie?\r\n  Result: [IGNORE]\r\n```\r\n\r\nI think this should be updated across all clients to make sure it's working consistently across all of them.\r\n",
    "state": "OPEN",
    "createdAt": "2024-12-20T13:16:42Z",
    "updatedAt": "2024-12-20T13:16:42Z",
    "author": {
      "login": "deadlock91",
      "avatarUrl": "https://avatars.githubusercontent.com/u/15176291?u=7be23ed97219bac8f3e8417da25a8e32fa5da5fa&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qWA",
        "name": "bug",
        "color": "d73a4a",
        "description": "Something isn't working"
      }
    ],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6kEuli",
    "number": 1266,
    "title": "Can't decide which actions to use from a plugin",
    "body": "**Is your feature request related to a problem? Please describe.**\r\nRight now i have to filter to select which actions i want to perform kinda like hardcoded, im doing something like this\r\n`import { solanaPlugin } from \"@ai16z/plugin-solana\";\r\n\r\n// Remove specific actions\r\nconst filteredPlugin = {\r\n    ...solanaPlugin,\r\n    actions: solanaPlugin.actions.filter(action => \r\n        // Exclude specific actions by name\r\n        action.name !== \"pumpfun\" && action.name !== \"fomo\"\r\n    )\r\n};`\r\n\r\nAnd I believe it should be easier to manage which actions from a given plugin to use.\r\n<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->\r\nI have to go and search deep to see what the plugin was doing to see if i decided to use it or not and i realized by default it had actions i didnt want to use and there was no way of no using them besides from what im doing right now. Making the learning curve bigger for new ones.\r\n**Describe the solution you'd like**\r\nI would like to implement in the docs more info about it and in the code add a way of decing which actions should it perform by adding them. At least in Solana where it's money involved and i believe should be something more custom.\r\n<!-- A clear and concise description of what you want to happen. -->\r\nAdd docs explaining the different actions, etc. And add in the code a way to make them optional.\r\n**Describe alternatives you've considered**\r\nRight now as i said im just hardcoding this \r\n`const filteredPlugin = {\r\n    ...solanaPlugin,\r\n    actions: solanaPlugin.actions.filter(action => \r\n        // Exclude specific actions by name\r\n        action.name !== \"pumpfun\" && action.name !== \"fomo\"\r\n    )\r\n};``\r\n\r\nTo decide which ones i want out.\r\n<!-- A clear and concise description of any alternative solutions or features you've considered. -->\r\nSame\r\n**Additional context**\r\n\r\n<!-- Add any other context or screenshots about the feature request here. -->\r\n",
    "state": "OPEN",
    "createdAt": "2024-12-20T13:04:20Z",
    "updatedAt": "2024-12-20T13:04:20Z",
    "author": {
      "login": "lausuarez02",
      "avatarUrl": "https://avatars.githubusercontent.com/u/67484166?u=386f6ed7ac28b9821f61ac663e8e6873a13faaf8&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qYA",
        "name": "enhancement",
        "color": "a2eeef",
        "description": "New feature or request"
      }
    ],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6kEWkt",
    "number": 1265,
    "title": "\"TypeError: response.body?.getReader is not a function\" from package/plugin-node",
    "body": "**Describe the bug**\r\n\r\nWhen attempting to produce speech using elevenlabs, from my discord bot, there is an error regarding `getReader is not a function`.\r\n\r\nhttps://github.com/ai16z/eliza/blob/81d027327ebba82ef3ed473d0e914c90e18e362d/packages/plugin-node/src/services/speech.ts#L126C1-L126C16\r\n\r\nI attempted to replace the fetch call with the official elevenlabs js package but wasn't successful\r\n\r\n**To Reproduce**\r\n\r\n1. create discord bot character\r\n2. add to voice chat\r\n3. talk to it\r\n4. text response is generated, elevenlabs processing fails, defaults to the viits audio\r\n\r\n**Expected behavior**\r\n\r\n\r\n1. create discord bot character\r\n2. add to voice chat\r\n3. talk to it\r\n4. text response is generated, elevenlabs processing fails, properly outputs the elevenlabs audio\r\n\r\n\r\n**Screenshots**\r\n\r\n<!-- If applicable, add screenshots to help explain your problem. -->\r\n\r\n**Additional context**\r\n\r\n```\r\nnode v23.3.0\r\nlinux 6.12 - manjaro\r\n```",
    "state": "OPEN",
    "createdAt": "2024-12-20T12:06:21Z",
    "updatedAt": "2024-12-20T12:06:21Z",
    "author": {
      "login": "y4my4my4m",
      "avatarUrl": "https://avatars.githubusercontent.com/u/8145020?u=e3e02ca2d12f2c6659e77b57ce7e5834a1b1824c&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qWA",
        "name": "bug",
        "color": "d73a4a",
        "description": "Something isn't working"
      }
    ],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6kBi5k",
    "number": 1261,
    "title": "Improve logging for the Coinbase plugin",
    "body": "**Is your feature request related to a problem? Please describe.**\n\nCurrently, our logging for the Coinbase plugin lacks structured formats and essential context, making it challenging to debug issues effectively and trace requests across services.\n\n**Describe the solution you'd like**\n\nImplement a structured logging framework that:\n- Uses JSON format for all logs.\n- Includes standard fields such as timestamp, severity, and correlation ID.\n- Supports context injection for better observability.\n- Has different log levels (DEBUG, INFO, WARN, ERROR).\n- Allows adding custom fields relevant to the Coinbase plugin operations.\n\nFor example, using a logging framework like Winston in Node.js:\n```javascript\nconst logger = require('winston');\nlogger.info('User login attempt', { userId: '12345', correlationId: 'abc-123' });\n```\nThis will greatly assist in correlating events and debugging any issues that may arise.\n\n**Describe alternatives you've considered**\n\n- Relying on plain text logs, which can be cumbersome to parse and analyze.\n- Using manual JSON formatting, which is error-prone.\n- Implementing APM tools without a standardized logging approach.\n\n**Additional context**\n\nEnhancing our logging practices will lead to better monitoring, easier log aggregation, and a more consistent logging pattern, ultimately improving our overall observability and debugging capabilities.",
    "state": "CLOSED",
    "createdAt": "2024-12-20T03:45:12Z",
    "updatedAt": "2024-12-20T03:46:04Z",
    "author": {
      "login": "monilpat",
      "avatarUrl": "https://avatars.githubusercontent.com/u/15067321?u=1271e57605b48029307547127c90e1bd5e4f3f39&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qYA",
        "name": "enhancement",
        "color": "a2eeef",
        "description": "New feature or request"
      },
      {
        "id": "LA_kwDOMT5cIs8AAAAB1sfhyA",
        "name": "logging",
        "color": "ededed",
        "description": null
      },
      {
        "id": "LA_kwDOMT5cIs8AAAAB11HltQ",
        "name": "coinbase",
        "color": "ededed",
        "description": null
      }
    ],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6kAn3P",
    "number": 1255,
    "title": "unsupported model provider: claude_vertex on develop branch",
    "body": "**Describe the bug**\r\nAfter pulling down /develop, installing, building, and then starting a character that uses `claude_vertex`, start errors out with the message:\r\n\r\n```\r\n[\"⛔ Failed to get token - unsupported model provider: claude_vertex\"]\r\n```\r\n\r\n<!-- A clear and concise description of what the bug is. -->\r\n\r\n**To Reproduce**\r\n1. Clone repo\r\n2. Switch to develop branch\r\n3. Install\r\n4. Build\r\n5. Run character with claude_vertex as the model provider\r\n\r\n<!-- Steps to reproduce the behavior. -->\r\n\r\n**Expected behavior**\r\nIt can run a character with claude_vertex as the model provider without erroring.\r\n\r\n<!-- A clear and concise description of what you expected to happen. -->\r\n\r\n**Screenshots**\r\n<img width=\"671\" alt=\"image\" src=\"https://github.com/user-attachments/assets/5493a1ce-36a6-46dd-9e2f-f6fb280aee51\" />\r\n\r\n<img width=\"261\" alt=\"image\" src=\"https://github.com/user-attachments/assets/0adc2cc0-6f13-4c93-8b71-8cd4ac6c4baf\" />\r\n\r\n<!-- If applicable, add screenshots to help explain your problem. -->\r\n\r\n**Additional context**\r\nN/A\r\n\r\n<!-- Add any other context about the problem here. -->\r\n",
    "state": "OPEN",
    "createdAt": "2024-12-19T23:50:33Z",
    "updatedAt": "2024-12-20T01:15:51Z",
    "author": {
      "login": "Minco-Yuga",
      "avatarUrl": "https://avatars.githubusercontent.com/u/191411961?u=03eb3ede614967ea99c2750769b74df2ef4c4e7c&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qWA",
        "name": "bug",
        "color": "d73a4a",
        "description": "Something isn't working"
      }
    ],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6kAcc6",
    "number": 1253,
    "title": "doc: Add Twitter automation label requirement to quickstart guide",
    "body": "## Issue\r\nMultiple users have reported their Eliza agents being flagged or shadowbanned on Twitter when their accounts weren't properly labeled as automated.\r\n\r\n## Current Situation\r\nThe quickstart guide explains how to set up Twitter integration but doesn't mention the requirement to enable the \"Automated\" label in the Twitter Developer Portal.\r\n\r\n## Proposed Solution\r\nAdd a brief but important notice in the Twitter Integration section of the quickstart guide about enabling the \"Automated\" label to prevent accounts from being flagged.\r\n\r\n## References\r\n- Discord discussions about accounts being flagged",
    "state": "CLOSED",
    "createdAt": "2024-12-19T22:59:50Z",
    "updatedAt": "2024-12-20T01:04:19Z",
    "author": {
      "login": "julienbrs",
      "avatarUrl": "https://avatars.githubusercontent.com/u/106234742?u=6c4c79bff8c2d650a0d94385f97d931916d2c3e4&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qWw",
        "name": "documentation",
        "color": "0075ca",
        "description": "Improvements or additions to documentation"
      },
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qYA",
        "name": "enhancement",
        "color": "a2eeef",
        "description": "New feature or request"
      }
    ],
    "comments": [
      {
        "id": "IC_kwDOMT5cIs6YWjCv",
        "author": "madjin",
        "body": "i see it got merged, ty"
      }
    ]
  }
]
